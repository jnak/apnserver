#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'getoptlong'
require 'rubygems'
require 'daemons'
require 'apnserver'
require 'apnserver/server'
require 'logger'

def usage
  puts "Usage: apnserverd [switches] --pem <path>"
  puts " --pem-passphrase <passphrase>        pem passphrase"
  puts " --bind-address [0.0.0.0]             bind address of proxy"
  puts " --proxy-port [22195]                 port proxy listens on"
  puts " --server <gateway.push.apple.com>    the apn server to send messages to"
  puts " --port <2195>                        the port of the apn server"
  puts " --pid </var/run/apnserverd.pid       the path to store the pid"
  puts " --log </var/log/apnserverd.log       the path to store the log"
  puts " --daemon                             to daemonize the server"
  puts " --help                               this message"
end

def daemonize
  options = {
      :backtrace  => true,
      :ontop      => false,
      :log_output => true,
      :app_name => 'apnserverd'
    }
  Daemons.daemonize(options)
end

opts = GetoptLong.new(
  ["--bind-address", "-b", GetoptLong::REQUIRED_ARGUMENT],
  ["--proxy-port", "-P", GetoptLong::REQUIRED_ARGUMENT],
  ["--server", "-s", GetoptLong::REQUIRED_ARGUMENT],
  ["--port", "-p", GetoptLong::REQUIRED_ARGUMENT],
  ["--pid", "-i", GetoptLong::REQUIRED_ARGUMENT],
  ["--log", "-l", GetoptLong::REQUIRED_ARGUMENT],
  ["--pem", "-c", GetoptLong::REQUIRED_ARGUMENT],
  ["--pem-passphrase", "-C", GetoptLong::REQUIRED_ARGUMENT],
  ["--help", "-h", GetoptLong::NO_ARGUMENT],
  ["--daemon", "-d", GetoptLong::NO_ARGUMENT]
)

bind_address = '0.0.0.0'
proxy_port = 22195
host = 'gateway.push.apple.com'
port = 2195
pem = nil
pem_passphrase = nil
daemon = false

opts.each do |opt, arg|
  case opt
  when '--help'
    usage
    exit 1
  when '--bind-address'
    bind_address = arg
  when '--proxy-port'
    proxy_port = arg.to_i
  when '--server'
    if arg == 'sandbox'
      host = 'gateway.sandbox.push.apple.com'
    else
      raise 'Wrong --server option. Pass "sandbox" as option to override production servers'
    end
  when '--port'
    port = arg.to_i
  when '--pid'
    @pid_file = arg
  when '--pem'
    pem = arg
  when '--pem-passphrase'
    pem_passphrase = arg
  when '--daemon'
    daemon = true
  when '--log'
    log = arg
  end
end

if pem.nil?
  usage
  exit 1
else
  daemonize if daemon
  server = ApnServer::Server.new(pem, bind_address, proxy_port, log)
  server.client.host = host
  server.client.port = port
  server.client.password = pem_passphrase
  server.start!
end